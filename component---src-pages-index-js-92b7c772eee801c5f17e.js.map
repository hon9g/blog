{"version":3,"sources":["webpack:///./src/components/Footer.jsx","webpack:///./src/components/Layout.jsx","webpack:///./src/components/About.jsx","webpack:///./src/components/PostLink.jsx","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["userInfo","emoji","Map","prefix","fadeIn","keyframes","slideIn","buttonStyle","css","query","render","user","site","siteMetadata","to","role","aria-label","filter","e","map","i","key","href","get","target","rel","children","styles","Footer","basicColor","keywordColor","variableColor","stringColor","data","photo","alt","src","name","x","toString","slug","title","date","excerpt","pageQuery","Layout","About","allMarkdownRemark","totalCount","edges","node","PostLink","id","fields","frontmatter","StaticQueryContext","loader","enqueue","React","createContext","StaticQueryDataRenderer","staticQueryData","finalData","Fragment","StaticQuery","props","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"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","file":"component---src-pages-index-js-92b7c772eee801c5f17e.js","sourcesContent":["import React from \"react\"\r\nimport { css, keyframes } from \"@emotion/core\"\r\nimport { Link, StaticQuery, graphql } from \"gatsby\"\r\n\r\nconst userInfo = ['github', 'email']\r\nconst emoji = new Map([['github', '🐱'], ['email', '✉️']])\r\nconst prefix = new Map([['github', 'https://github.com/'], ['email', 'mailto:']])\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    max-height: 0;\r\n    opacity: 0;\r\n  }\r\n  1% {\r\n    max-height: 0.1rem;\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    max-height: 1.3rem;\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst slideIn = keyframes`\r\n  from {\r\n    transform: translateY(0%);\r\n  }\r\n  to {\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst buttonStyle = css`\r\n  margin: 0.5rem\r\n  display: block;\r\n  height 2rem;\r\n  color: #4c4b56;\r\n  font-weight: bold;\r\n  background-image: none;\r\n  div {\r\n    margin-top: -0.3rem;\r\n    max-height: 0;\r\n    overflow: hidden;\r\n  }\r\n  :hover div {\r\n    animation: ${fadeIn} 1s ease;\r\n  }\r\n  :hover, :active {\r\n    animation: ${slideIn} 1s ease;\r\n  }\r\n`\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query FooterQuery {\r\n        site {\r\n          siteMetadata {\r\n            user {\r\n              email\r\n              github\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({site: {siteMetadata: {user}}}) => (\r\n        <footer\r\n          css={css`\r\n            width: 100%;\r\n            text-align: center;\r\n          `}\r\n        >\r\n          <div\r\n            css={css`\r\n              display: flex;\r\n              justify-content: center;\r\n            `}\r\n          >\r\n            <Link to={'/'} css={buttonStyle}>\r\n                <span role=\"img\" aria-label=\"go to home\">🏠</span>\r\n                <div>home</div>\r\n            </Link>\r\n            {userInfo.filter(e => user[e]).map((e, i) => (\r\n              <a key={i} href={`${prefix.get(e)}${user[e]}`} target=\"_blank\" rel=\"noopener noreferrer\" css={buttonStyle}>\r\n                <span role=\"img\" aria-label={`${e} emoji`}>{emoji.get(e)}</span>\r\n                <div>{e}</div>\r\n              </a>\r\n            ))}\r\n          </div>\r\n        </footer>\r\n    )}\r\n  />\r\n)","import React from \"react\"\r\nimport { Global, css } from \"@emotion/core\"\r\n\r\nimport Footer from './Footer'\r\n\r\nexport default ({children}) => (\r\n  <div\r\n    css={css`\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin: 0 auto;\r\n        height: 100vh;\r\n        max-width: 700px;\r\n        padding: 1.5rem 1rem 1rem 1rem;\r\n        color: #4c4b56;\r\n    `}\r\n  >\r\n    <Global styles={css`\r\n      @media only screen and (max-width: 400) {\r\n        .omit {\r\n          display: none;\r\n        }\r\n      }\r\n      th, td {\r\n        text-align: center;\r\n      }\r\n      mark {\r\n        padding: 0.2rem;\r\n        background-color: #FFC300;\r\n      }\r\n    `}/>\r\n    <div css={css`flex-grow: 3;`}>\r\n      {children}\r\n    </div>\r\n    <div css={css`flex-grow: 1;`}>\r\n      <Footer />\r\n    </div>\r\n    \r\n  </div>\r\n)","import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\n\r\nconst basicColor = css`color: #4c4b56;`\r\nconst keywordColor = css`color: #cb4b16;`\r\nconst variableColor = css`color: #6c71c4;`\r\nconst stringColor = css`color: #d80;`\r\nconst userInfo = ['role', 'location'];\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query HeadingQuery {\r\n        site {\r\n          siteMetadata {\r\n            user {\r\n              name\r\n              photo\r\n              role\r\n              location\r\n            }\r\n          }\r\n        }\r\n      }\r\n  `}\r\n    render={data => (\r\n      <header\r\n        css={css`\r\n          display: flex;\r\n          max-height: 25vh;\r\n          justify-content: center;\r\n        `}\r\n      >\r\n      {\r\n        data.site.siteMetadata.user.photo \r\n          ? <img\r\n            css={css`\r\n              margin: 0.5rem;\r\n              max-width: 30vw;\r\n              max-height: 9rem;\r\n              object-fit: cover;\r\n            `}\r\n            alt=\"my face\"\r\n            src={data.site.siteMetadata.user.photo}/>\r\n          : ''\r\n      }\r\n      <div css={css`margin: auto 0.2rem; ${basicColor}`}>\r\n        <h1\r\n          css={css`\r\n            margin:auto;\r\n            font-size: 1rem;\r\n          `}\r\n        >\r\n          <span css={keywordColor}>{`const `}</span>\r\n          <span css={variableColor}>{data.site.siteMetadata.user.name}</span>\r\n            {` = {`}\r\n            {userInfo.map((x, i) => (\r\n                data.site.siteMetadata.user[x]\r\n                ? <div key={i.toString()} css={css`margin: 0.2rem 1rem`}>\r\n                    {x}: <span css={stringColor}>{data.site.siteMetadata.user[x]}</span>,\r\n                  </div>\r\n                : ''\r\n            ))}\r\n            {`}`}\r\n        </h1>\r\n      </div>\r\n    </header>\r\n  )}\r\n/>)\r\n\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\n\r\nexport default ({slug, title, date, excerpt}) => (\r\n  <Link\r\n    to={slug}\r\n    css={css`\r\n        margin: 0 1rem;\r\n        text-decoration: none;\r\n        color: inherit;\r\n    `}\r\n  >\r\n    <h2\r\n      css={css`\r\n        margin: 0.5rem 0;\r\n        font-size: 1rem;\r\n        color: inherit;\r\n      `}>\r\n      <span css={css`color: #6c71c4;`}>{title}</span>\r\n      <span\r\n        css={css`\r\n          float: right;  \r\n          @media (max-width: 400px) {\r\n            background: black;\r\n            display: none;\r\n          }  \r\n        `}\r\n      >\r\n        {date}\r\n      </span>\r\n    </h2>\r\n    <p\r\n      css={css`\r\n        padding-left: 1rem;\r\n        height: 1rem;\r\n        text-overflow: ellipsis;\r\n      `}\r\n    >\r\n      {excerpt}\r\n    </p>\r\n  </Link>\r\n)\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\n\r\nimport About from \"../components/About\"\r\nimport Layout from \"../components/Layout\"\r\nimport PostLink from \"../components/PostLink\"\r\n\r\n\r\nexport default ({ data }) => (\r\n  <Layout>\r\n    <div\r\n      css={css`\r\n        display:flex;\r\n        flex-direction: column;\r\n        flex-wrap: wrap;\r\n        justify-content: space-evenly;\r\n        height: 100%;\r\n      `}\r\n    >\r\n      <About />\r\n      <div css={css`\r\n          color: #4c4b56\r\n        `}\r\n      >\r\n        <h3 css={css`\r\n            margin: 0;\r\n            font-size: 1rem;\r\n            color: inherit;\r\n          `}\r\n        >\r\n          {`/** ${data.allMarkdownRemark.totalCount} posts`}\r\n        </h3>\r\n        <div css={css`\r\n            overflow-y: scroll;\r\n            max-height: 45vh;\r\n          `}\r\n        >\r\n          {data.allMarkdownRemark.edges.map(({node}) => (\r\n            <PostLink\r\n              key = {node.id}\r\n              slug={node.fields.slug}\r\n              title={node.frontmatter.title}\r\n              date={node.frontmatter.date}\r\n              excerpt={node.excerpt}\r\n            />\r\n          ))}\r\n        </div>\r\n        <h3 css={css`\r\n            margin: 0;\r\n            font-size: 1rem;\r\n            color: inherit;\r\n          `}\r\n        >\r\n        {` */`}\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport const pageQuery = graphql`\r\nquery {\r\n  allMarkdownRemark(sort: {\r\n    fields : [frontmatter___date],\r\n    order: DESC\r\n  }) {\r\n    totalCount\r\n    edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 70)\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD MMMM, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n    }\r\n  }\r\n}\r\n`","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}