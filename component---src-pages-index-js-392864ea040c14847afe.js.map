{"version":3,"sources":["webpack:///./src/components/About.jsx","webpack:///./src/components/PostLink.jsx","webpack:///./src/pages/index.js"],"names":["keywordColor","variableColor","stringColor","userInfo","query","render","data","css","site","siteMetadata","user","photo","rhythm","alt","src","name","map","x","i","key","toString","slug","title","date","excerpt","to","pageQuery","Layout","About","allMarkdownRemark","totalCount","edges","node","PostLink","id","fields","frontmatter"],"mappings":"0OAKMA,EAAY,wCACZC,EAAa,wCACbC,EAAW,qCACXC,EAAW,CAAC,OAAQ,Y,yGAEX,oBACb,YAAC,IAAD,CACEC,MAAK,aAcLC,OAAQ,SAAAC,GAAI,OACV,sBACEC,IAAG,GAMHD,EAAKE,KAAKC,aAAaC,KAAKC,MACxB,mBACAJ,IAAKA,YAAF,UACSK,YAAO,EAAE,GADlB,cAEYA,YAAO,GAFnB,eAGaA,YAAO,GAHpB,sBAMHC,IAAI,UACJC,IAAKR,EAAKE,KAAKC,aAAaC,KAAKC,QACjC,GAEN,mBAAKJ,IAAKA,YAAF,eACWK,YAAO,EAAE,GADpB,oBAKN,kBACEL,IAAG,GAIH,oBAAMA,IAAKP,GAAX,UACA,oBAAMO,IAAKN,GAAgBK,EAAKE,KAAKC,aAAaC,KAAKK,MANzD,OAQKZ,EAASa,KAAI,SAACC,EAAGC,GAAJ,OACVZ,EAAKE,KAAKC,aAAaC,KAAKO,GAC1B,mBACAE,IAAKD,EAAEE,WACPb,IAAKA,YAAF,UACSK,YAAO,IADhB,IACwBA,YAAO,MAG/BK,EANH,IAOE,oBAAMV,IAAKL,GACRI,EAAKE,KAAKC,aAAaC,KAAKO,IARjC,KAWA,MArBV,QAxCN,U,uJCNa,kBAAEI,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,QAArB,OACb,YAAC,IAAD,CACEC,GAAIJ,EACJd,IAAKA,YAAF,YACaK,YAAO,GADpB,yCAMH,kBACEL,IAAKA,YAAF,UACSK,YAAO,EAAE,GADlB,sBAIH,oBAAML,IAAG,GAAyBe,GAClC,oBACEf,IAAG,GAQFgB,IAGL,iBACEhB,IAAKA,YAAF,UACSK,YAAO,EAAE,GADlB,mBAEeA,YAAO,IAFtB,6BAMFY,K,uUCoBME,GAlDE,0BAAGpB,EAAH,EAAGA,KAAH,OACb,YAACqB,EAAA,EAAD,KACE,mBACEpB,IAAG,GAQH,YAACqB,EAAD,MACA,mBAAKrB,IAAG,GAIN,kBAAIA,IAAG,GAAP,OAKUD,EAAKuB,kBAAkBC,WALjC,UAOA,mBAAKvB,IAAG,GAKLD,EAAKuB,kBAAkBE,MAAMf,KAAI,gBAAEgB,EAAF,EAAEA,KAAF,OAChC,YAACC,EAAD,CACEd,IAAOa,EAAKE,GACZb,KAAMW,EAAKG,OAAOd,KAClBC,MAAOU,EAAKI,YAAYd,MACxBC,KAAMS,EAAKI,YAAYb,KACvBC,QAASQ,EAAKR,cAIpB,kBAAIjB,IAAG,GAAP,WAYc,e","file":"component---src-pages-index-js-392864ea040c14847afe.js","sourcesContent":["import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst keywordColor = css`color: #cb4b16;`\r\nconst variableColor = css`color: #6c71c4;`\r\nconst stringColor = css`color: #d80;`\r\nconst userInfo = ['role', 'location'];\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query HeadingQuery {\r\n        site {\r\n          siteMetadata {\r\n            user {\r\n              name\r\n              photo\r\n              role\r\n              location\r\n            }\r\n          }\r\n        }\r\n      }\r\n  `}\r\n    render={data => (\r\n      <header\r\n        css={css`\r\n          display: flex;\r\n          justify-content: center;\r\n        `}\r\n      >\r\n      {\r\n        data.site.siteMetadata.user.photo \r\n          ? <img\r\n            css={css`\r\n              margin: ${rhythm(1/3)};\r\n              max-width: ${rhythm(4)};\r\n              max-height: ${rhythm(6)};\r\n              object-fit: cover;\r\n            `}\r\n            alt=\"my face\"\r\n            src={data.site.siteMetadata.user.photo}/>\r\n          : ''\r\n      }\r\n      <div css={css`\r\n          margin: auto ${rhythm(1/3)};\r\n          color: inherit;\r\n        `}\r\n      >\r\n        <h3\r\n          css={css`\r\n            margin:auto;\r\n          `}\r\n        >\r\n          <span css={keywordColor}>{`const `}</span>\r\n          <span css={variableColor}>{data.site.siteMetadata.user.name}</span>\r\n            {` = {`}\r\n            {userInfo.map((x, i) => (\r\n                data.site.siteMetadata.user[x]\r\n                ? <div\r\n                  key={i.toString()}\r\n                  css={css`\r\n                    margin: ${rhythm(1/5)} ${rhythm(1/2)}\r\n                  `}\r\n                >\r\n                    {x}:\r\n                    <span css={stringColor}>\r\n                      {data.site.siteMetadata.user[x]}\r\n                    </span>,\r\n                  </div>\r\n                : ''\r\n            ))}\r\n            {`}`}\r\n        </h3>\r\n      </div>\r\n    </header>\r\n  )}\r\n/>)\r\n\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nexport default ({slug, title, date, excerpt}) => (\r\n  <Link\r\n    to={slug}\r\n    css={css`\r\n        margin: 0 ${rhythm(1)};\r\n        text-decoration: none;\r\n        color: inherit;\r\n    `}\r\n  >\r\n    <h3\r\n      css={css`\r\n        margin: ${rhythm(1/3)} 0;\r\n        color: inherit;\r\n      `}>\r\n      <span css={css`color: #6c71c4;`}>{title}</span>\r\n      <span\r\n        css={css`\r\n          float: right;  \r\n          @media (max-width: 400px) {\r\n            background: black;\r\n            display: none;\r\n          }  \r\n        `}\r\n      >\r\n        {date}\r\n      </span>\r\n    </h3>\r\n    <p\r\n      css={css`\r\n        margin: ${rhythm(1/3)} 0;\r\n        padding-left: ${rhythm(1/2)};\r\n        text-overflow: ellipsis;\r\n      `}\r\n    >\r\n      {excerpt}\r\n    </p>\r\n  </Link>\r\n)\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { css } from \"@emotion/core\"\r\n\r\nimport About from \"../components/About\"\r\nimport Layout from \"../components/Layout\"\r\nimport PostLink from \"../components/PostLink\"\r\n\r\n\r\nexport default ({ data }) => (\r\n  <Layout>\r\n    <div\r\n      css={css`\r\n        display:flex;\r\n        flex-direction: column;\r\n        flex-wrap: wrap;\r\n        justify-content: space-evenly;\r\n        height: 100%;\r\n      `}\r\n    >\r\n      <About />\r\n      <div css={css`\r\n          color: #4c4b56\r\n        `}\r\n      >\r\n        <h3 css={css`\r\n            margin: 0;\r\n            color: inherit;\r\n          `}\r\n        >\r\n          {`/** ${data.allMarkdownRemark.totalCount} posts`}\r\n        </h3>\r\n        <div css={css`\r\n            overflow-y: scroll;\r\n            max-height: 45vh;\r\n          `}\r\n        >\r\n          {data.allMarkdownRemark.edges.map(({node}) => (\r\n            <PostLink\r\n              key = {node.id}\r\n              slug={node.fields.slug}\r\n              title={node.frontmatter.title}\r\n              date={node.frontmatter.date}\r\n              excerpt={node.excerpt}\r\n            />\r\n          ))}\r\n        </div>\r\n        <h3 css={css`\r\n            margin: 0;\r\n            color: inherit;\r\n          `}\r\n        >\r\n        {` */`}\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport const pageQuery = graphql`\r\nquery {\r\n  allMarkdownRemark(sort: {\r\n    fields : [frontmatter___date],\r\n    order: DESC\r\n  }) {\r\n    totalCount\r\n    edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 70)\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD MMMM, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n    }\r\n  }\r\n}\r\n`"],"sourceRoot":""}